// 4.12 기타 기능

// ·확장 함수 : 원래 있던 클래스에 기능을 추가하는 함수
// ·형변환 : 숫자형 자료형끼리 쉽게 형변환 가능
// ·형 체크 : 변수의 형이 무엇인지 검사하는 기능
// ·고차 함수 : 인자로 함수를 전달하는 기능
// ·동반 객체 : 클래스의 인스턴스 생성없이 사용할 수 있는 객체
// ·let() 함수 : 블록에 자기 자신을 전달하고 수행된 결과를 반환하는 함수
// ·with() 함수 : 인자로 객체를 받고 블록에서 수행된 결과를 반환하는 함수
// ·apply() 함수 : 블록에 자기 자신을 전달하고 이 객체를 반환하는 함수
// // run() 함수 : 익명함수처럼 사용하거나,
// 블록에 자기 자신을 전달하고 수행된 결과를 반환하는 함수


// 4.12.1 확장 함수
// 코틀린은 확장 함수 기능을 사용하여 쉽게 기존 클래스에 함수를 추가할  수 있다.
// 확장 함수를 추가할 클래스에 점을 찍고 함수 이름을 작성한다. 확장 함수 내부에서는
// 이 객체를 this로 접근할 수 있고 이러한 객체를 비시버 객체라고 한다.

//  다음 코드는 int 자료형에 짝수인지 아닌지를 알 수 있도록 isEven() 확장 함수를 추가한 예이다.

fun Int.isEven() = this % 2 == 0

val a = 5
val b = 6

println(a.isEven)  // false
println(b.isEven())  // ture

// 자바에서는 기본 자료형에 기능을 추가하려면 상속을 받고 추가 메서드를 작성해야 했다.
// String 클래스의 경우 final로 상속이 막혀 있어 이 마저도 불가능 했다.
